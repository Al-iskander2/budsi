--- a/tu_app/models.py
+++ b/tu_app/models.py
@@ class CustomUser(AbstractUser):
-    username = None
+    username = None
     email = models.EmailField(_('email address'), unique=True)
 
     USERNAME_FIELD = 'email'
     REQUIRED_FIELDS = []
 
+    objects = CustomUserManager()

--- a/tu_app/managers.py
+++ b/tu_app/managers.py
@@ new file
+from django.contrib.auth.base_user import BaseUserManager
+from django.utils.translation import gettext_lazy as _
+
+class CustomUserManager(BaseUserManager):
+    use_in_migrations = True
+
+    def _create_user(self, email, password, **extra_fields):
+        if not email:
+            raise ValueError(_("The Email must be set"))
+        email = self.normalize_email(email)
+        user = self.model(email=email, **extra_fields)
+        user.set_password(password)
+        user.save(using=self._db)
+        return user
+
+    def create_user(self, email, password=None, **extra_fields):
+        extra_fields.setdefault("is_staff", False)
+        extra_fields.setdefault("is_superuser", False)
+        return self._create_user(email, password, **extra_fields)
+
+    def create_superuser(self, email, password=None, **extra_fields):
+        extra_fields.setdefault("is_staff", True)
+        extra_fields.setdefault("is_superuser", True)
+        if extra_fields.get("is_staff") is not True:
+            raise ValueError("Superuser must have is_staff=True.")
+        if extra_fields.get("is_superuser") is not True:
+            raise ValueError("Superuser must have is_superuser=True.")
+        return self._create_user(email, password, **extra_fields)

--- a/tu_app/backends.py
+++ b/tu_app/backends.py
@@ new file
+from django.contrib.auth.backends import ModelBackend
+from django.contrib.auth import get_user_model
+
+class EmailBackend(ModelBackend):
+    def authenticate(self, request, email=None, password=None, **kwargs):
+        User = get_user_model()
+        try:
+            user = User.objects.get(email=email)
+        except User.DoesNotExist:
+            return None
+        if user.check_password(password):
+            return user
+        return None

--- a/settings.py
+++ b/settings.py
@@
-AUTHENTICATION_BACKENDS = [...]
+AUTHENTICATION_BACKENDS = ['tu_app.backends.EmailBackend']

-AUTH_USER_MODEL = 'tu_app.CustomUser'
+AUTH_USER_MODEL = 'tu_app.CustomUser'

--- a/tu_app/forms.py
+++ b/tu_app/forms.py
@@ class CustomUserCreationForm(UserCreationForm):
-    class Meta:
-        model = CustomUser
-        fields = ('username', 'email', ...)
+    class Meta:
+        model = CustomUser
+        fields = ('email',)

--- a/tu_app/admin.py
+++ b/tu_app/admin.py
@@
 from django.contrib.auth.admin import UserAdmin
-from django.contrib.auth.forms import UserCreationForm, UserChangeForm
+from .forms import CustomUserCreationForm, CustomUserChangeForm
 from .models import CustomUser
+
 class CustomUserAdmin(UserAdmin):
-    add_form = UserCreationForm
-    form = UserChangeForm
+    add_form = CustomUserCreationForm
+    form = CustomUserChangeForm
     model = CustomUser
     list_display = ('email', 'is_staff', 'is_active')
     fieldsets = (
         (None, {'fields': ('email', 'password')}),
         ('Permissions', {'fields': ('is_staff', 'is_superuser')}),
     )
@@
 admin.site.register(CustomUser, CustomUserAdmin)

--- a/tu_app/views.py
+++ b/tu_app/views.py
@@ def login_view(request):
-    email = request.POST.get("username")
+    email = request.POST.get("email")
     password = request.POST.get("password")
-    user = authenticate(request, username=username, password=password)
+    user = authenticate(request, email=email, password=password)
